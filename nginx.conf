env REDIS_PORT;
env POSTGRES_PORT;
env POSTGRES_USER;
env POSTGRES_PASSWORD;
env POSTGRES_DATABASE;
env DOCKER_USER;
env DOCKER_SECRET;
env APPLICATION_ID;
env APPLICATION_SECRET;
env ARDOISES_USER;
env ARDOISES_TOKEN;
env ARDOISES_SECRET;
env DOCKERCLOUD_SERVICE_API_URL; # docker-cloud specific
env WERCKER_GIT_BRANCH; # wercker specific

worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  resolver "8.8.8.8" "4.4.4.4";

  init_worker_by_lua_block {
    local Config = require "lapis.config".get ()
    local Qless  = require "resty.qless"
    local Worker = require "resty.qless.worker"
    local worker = Worker.new (Config.redis)
    worker:start {
      interval    = 1,
      concurrency = 5,
      reserver    = "ordered",
      queues      = { "ardoises" },
    }
  }
  server {
    server_name     "${{HOST}}";
    listen          "${{PORT}}";
    default_type    "application/json";
    lua_code_cache  on;

    location @lapis {
      content_by_lua_block {
        require "resty.core"
        require "lapis".serve "ardoises.server"
      }
    }

    location / {
      autoindex           off;
      sendfile            on;
      sendfile_max_chunk  1m;
      etag                on;
      root                /static;
      try_files           $uri $uri.html = @lapis;
    }

    location /lua {
      root          /;
      etag          on;
      default_type  "application/lua";
      set           $target   "";
      access_by_lua_block {
        local name     = ngx.var.uri:match "/lua/(.*)"
        local filename = package.searchpath (name, package.path)
        if filename then
          ngx.var.target = filename
        else
          return ngx.exit (404)
        end
      }
      try_files $target =404;
    }

  }

}
