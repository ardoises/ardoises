local Copas = require "copas"

local Editor  = _G.js.global.document:getElementById "content"
local loading = 0
Editor.innerHTML = [[
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-6 col-md-offset-3">
        <div class="progress">
          <div id="progress"
               class="progress-bar progress-bar-success progress-bar-striped active"
               role="progressbar"
               aria-valuenow="0"
               aria-valuemin="0"
               aria-valuemax="100"
               style="width:0%">
          </div>
        </div>
      </div>
    </div>
  </div>
]]
local Progress = _G.js.global.document:getElementById "progress"

Copas.addthread (function ()
  local expected = 5 -- seconds
  local step     = 0.25 -- seconds
  while loading do
    local speed = (100 - loading) / (expected / step)
    loading = loading + speed
    Progress:setAttribute ("style", "width:" .. tostring (loading) .. "%")
    Copas.sleep (math.random (0.1, 0.5))
  end
end)

local Client = require "ardoises.client"
local Et     = require "etlua"
local Layer  = require "layeredata"
local client = Client {
  server = "{{{server}}}",
  tokens = {
    ardoises = "{{{user.tokens.ardoises}}}",
    github   = "{{{user.tokens.github}}}",
  },
}
local ardoise
for _, a in ipairs (client:ardoises ()) do
  if  a.repository.full_name == "{{{repository.full_name}}}"
  and a.branch == "{{{branch}}}" then
    ardoise = a
    break
  end
end
assert (ardoise)
local editor = ardoise:edit ()
loading = false

Copas.addthread (function ()
  while true do
    print (editor.websocket and editor.websocket.websocket)
    Copas.sleep (10)
  end
end)

local function default_togui (parameters)
  assert (type (parameters) == "table")
  -- local editor = assert (parameters.editor)
  local what   = assert (parameters.what  )
  local target = assert (parameters.target)
  target.innerHTML = [[
    <div class="panel panel-default">
      <div class="panel-body">
        <div class="editor" id="layer">
        </div>
      </div>
    </div>
  ]]
  local sourced = _G.window.ace:edit "layer"
  sourced:setReadOnly (true)
  sourced ["$blockScrolling"] = true
  sourced:setTheme "ace/theme/monokai"
  sourced:getSession ():setMode "ace/mode/lua"
  sourced:setValue (what.code)
  coroutine.yield ()
  target.innerHTML = [[]]
end

Editor.innerHTML = [[
  <section>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-2">
          <div class="list-group">
            <div class="list-group-item row">
              <div class="input-group">
                <span class="input-xlarge uneditable-input">{{repository.owner.login}}/{{repository.name}}:{{branch}}</span>
                <span class="input-group-addon js-gitter-toggle-chat-button"><i class="fa fa-comments fa-inverse" aria-hidden="true"></i></span>
              </div>
            </div>
          </div>
          <div id="layers"></div>
        </div>
        <div id="ardoise" class="col-md-10">
        </div>
      </div>
    </div>
  </section>
]]

local Layers  = _G.js.global.document:getElementById "layers"
local Ardoise = _G.js.global.document:getElementById "ardoise"
local active

local renderers = {
  layers  = nil,
  ardoise = nil,
}
renderers.layers = Copas.addthread (function ()
  while true do
    local layers = {}
    for name, module in editor:list () do
      layers [#layers+1] = {
        id     = #layers+1,
        name   = name,
        module = module,
      }
    end
    table.sort (layers, function (l, r) return l.name < r.name end)
    Layers.innerHTML = Et.render ([[
      <div class="list-group">
        <div class="list-group-item row">
          <div class="input-group">
            <input id="layer-name" type="text" class="form-control" placeholder="Module" />
            <span id="layer-create" class="input-group-addon"><i class="fa fa-plus fa-inverse" aria-hidden="true"></i></span>
          </div>
        </div>
        <% for _, layer in ipairs (layers) do %>
          <div class="list-group-item row">
            <div class="input-group">
              <span id="layer-get-<%- layer.id %>" class="input-xlarge uneditable-input"><%= layer.name %></span>
              <span id="layer-delete-<%- layer.id %>" class="input-group-addon"><i class="fa fa-trash fa-inverse" aria-hidden="true"></i></span>
            </div>
          </div>
        <% end %>
      </div>
    ]], {
      layers = layers,
    })
    do
      local link = _G.js.global.document:getElementById "layer-create"
      link.onclick = function ()
        local name = _G.js.global.document:getElementById "layer-name".value
        Copas.addthread (function ()
          active = editor:create (name)
          Copas.wakeup (renderers.layers)
          Copas.wakeup (renderers.ardoise)
        end)
        return false
      end
    end
    for _, layer in ipairs (layers) do
      local link = _G.js.global.document:getElementById ("layer-get-" .. tostring (layer.id))
      link.onclick = function ()
        Copas.addthread (function ()
          active = layer.name
          Copas.wakeup (renderers.ardoise)
        end)
        return false
      end
    end
    for _, layer in ipairs (layers) do
      local link = _G.js.global.document:getElementById ("layer-delete-" .. tostring (layer.id))
      link.onclick = function ()
        Copas.addthread (function ()
          if active == layer.name then
            active = nil
          end
          editor:delete (layer.name)
          Copas.wakeup (renderers.layers)
          Copas.wakeup (renderers.ardoise)
        end)
        return false
      end
    end
    Copas.sleep (-math.huge)
  end
end)

renderers.ardoise = Copas.addthread (function ()
  while true do
    if active then
      local what  = editor:require (active)
      local gui   = what.layer [Layer.key.meta]
                and what.layer [Layer.key.meta].gui
      local togui = what.layer [Layer.key.meta]
                and what.layer [Layer.key.meta] [gui]
                and what.layer [Layer.key.meta] [gui].render
                 or default_togui
      local co = coroutine.create (togui)
      coroutine.resume (co, {
        name   = active.name,
        editor = editor,
        what   = what,
        target = Ardoise,
        width  = _G.window.innerWidth  * 0.8,
        height = _G.window.innerHeight * 0.8,
      })
    end
    Copas.sleep (-math.huge)
  end
end)
