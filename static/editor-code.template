local Progress = require "progressbar"
local progress = Progress {
  expected = 5, -- seconds
}

local Copas  = require "copas"
local Client = require "ardoises.client"
local Et     = require "etlua"
local Layer  = require "layeredata"
local client = Client {
  server = "{{{server}}}",
  tokens = {
    ardoises = "{{{user.tokens.ardoises}}}",
    github   = "{{{user.tokens.github}}}",
  },
}
local ardoise
for _, a in ipairs (client:ardoises ()) do
  if  a.repository.full_name == "{{{repository.full_name}}}"
  and a.branch == "{{{branch}}}" then
    ardoise = a
    break
  end
end
assert (ardoise)
local editor = ardoise:edit ()
progress.finished = true

Copas.addthread (function ()
  while true do
    print (editor.websocket and editor.websocket.websocket)
    Copas.sleep (10)
  end
end)

local function default_togui (parameters)
  assert (type (parameters) == "table")
  -- local editor = assert (parameters.editor)
  local what   = assert (parameters.what  )
  local target = assert (parameters.target)
  target.innerHTML = [[
    <div class="panel panel-default">
      <div class="panel-body">
        <div class="editor" id="layer">
        </div>
      </div>
    </div>
  ]]
  local sourced = _G.window.ace:edit "layer"
  sourced:setReadOnly (true)
  sourced ["$blockScrolling"] = true
  sourced:setTheme "ace/theme/monokai"
  sourced:getSession ():setMode "ace/mode/lua"
  sourced:setValue (what.code)
  coroutine.yield ()
  target.innerHTML = [[]]
end

local Content = _G.js.global.document:getElementById "content"
Content.innerHTML = [[
  <section>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-2">
          <div class="list-group">
            <div class="list-group-item row">
              <div class="input-group">
                <span class="input-xlarge uneditable-input">{{repository.owner.login}}/{{repository.name}}:{{branch}}</span>
                <span class="input-group-addon js-gitter-toggle-chat-button"><i class="fa fa-comments fa-inverse" aria-hidden="true"></i></span>
              </div>
            </div>
          </div>
          <div id="layers"></div>
        </div>
        <div id="ardoise" class="col-md-10">
        </div>
      </div>
    </div>
  </section>
]]

local Layers  = _G.js.global.document:getElementById "layers"
local Ardoise = _G.js.global.document:getElementById "ardoise"
local active
local layers

local renderers = {
  layers  = nil,
  ardoise = nil,
  active  = nil,
}
renderers.layers = Copas.addthread (function ()
  local in_delete
  while true do
    layers = {}
    for name, module in editor:list () do
      layers [#layers+1] = {
        id     = #layers+1,
        name   = name,
        module = module,
      }
    end
    table.sort (layers, function (l, r) return l.name < r.name end)
    Layers.innerHTML = Et.render ([[
      <div class="list-group">
        <div class="list-group-item row">
          <div class="input-group">
            <input id="layer-name" type="text" class="form-control" placeholder="Module" />
            <span id="layer-create" class="input-group-addon"><i class="fa fa-plus fa-inverse" aria-hidden="true"></i></span>
          </div>
        </div>
        <% for _, layer in ipairs (layers) do %>
          <div class="list-group-item row" id="layer-get-<%- layer.id %>">
            <div class="input-group">
              <span class="input-xlarge uneditable-input"><%= layer.name %></span>
              <span class="input-group-addon"><button id="layer-delete-<%- layer.id %>" class="btn btn-xs"><i class="fa fa-trash fa-inverse" aria-hidden="true"></i></button></span>
            </div>
          </div>
        <% end %>
      </div>
    ]], {
      layers = layers,
    })
    do
      local link = _G.js.global.document:getElementById "layer-create"
      link.onclick = function ()
        local name = _G.js.global.document:getElementById "layer-name".value
        Copas.addthread (function ()
          active = {
            module = editor:create (name),
            link   = link,
          }
          Copas.wakeup (renderers.layers)
          Copas.wakeup (renderers.ardoise)
        end)
        return false
      end
    end
    for _, layer in ipairs (layers) do
      local link = _G.js.global.document:getElementById ("layer-get-" .. tostring (layer.id))
      link.onclick = function ()
        Copas.addthread (function ()
          active = {
            module = layer.module,
            link   = link,
          }
          Copas.wakeup (renderers.ardoise)
          Copas.wakeup (renderers.active)
        end)
        return false
      end
    end
    for _, layer in ipairs (layers) do
      local link = _G.js.global.document:getElementById ("layer-delete-" .. tostring (layer.id))
      link.onclick = function ()
        if link.disabled then
          return false
        elseif in_delete == link then
          in_delete.classList:remove "btn-warning"
          in_delete.disabled = false
          Copas.addthread (function ()
            if active and active.module == layer.module then
              active = nil
            end
            editor:delete (layer.module)
            Copas.wakeup (renderers.layers)
            Copas.wakeup (renderers.ardoise)
          end)
        else
          link.disabled = true
          in_delete     = link
          in_delete.classList:add "btn-warning"
          Copas.addthread (function ()
            Copas.sleep (2) -- second
            link.disabled = false
            Copas.sleep (5) -- seconds
            link.classList:remove "btn-warning"
            if in_delete == link then
              in_delete = nil
            end
          end)
        end
        return false
      end
    end
    Copas.wakeup (renderers.active)
    Copas.sleep (-math.huge)
  end
end)

renderers.active = Copas.addthread (function ()
  while true do
    for _, layer in ipairs (layers) do
      local link = _G.js.global.document:getElementById ("layer-get-" .. tostring (layer.id))
      if active and active.module == layer.module then
        link.parentNode.parentNode.classList:add "active"
      else
        link.parentNode.parentNode.classList:remove "active"
      end
    end
    Copas.sleep (-math.huge)
  end
end)

renderers.ardoise = Copas.addthread (function ()
  while true do
    if active then
      local what  = editor:require (active.module)
      local gui   = what.layer [Layer.key.meta]
                and what.layer [Layer.key.meta].gui
      local togui = what.layer [Layer.key.meta]
                and what.layer [Layer.key.meta] [gui]
                and what.layer [Layer.key.meta] [gui].render
                 or default_togui
      local co = coroutine.create (togui)
      coroutine.resume (co, {
        editor = editor,
        what   = what,
        target = Ardoise,
        width  = _G.window.innerWidth  * 0.8,
        height = _G.window.innerHeight * 0.8,
      })
    else
      Ardoise.innerHTML = ""
    end
    Copas.sleep (-math.huge)
  end
end)
