env DOCKER_URL;
env REDIS_URL;
env ARDOISES_URL;
env ARDOISES_IMAGE;
env APPLICATION_ID;
env APPLICATION_SECRET;
env APPLICATION_TOKEN;

worker_processes 4;
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /usr/local/openresty/nginx/conf/mime.types;
  resolver "8.8.8.8"
           "4.4.4.4";

  server {
    server_name     ardoises.ovh;
    listen          80;
    # listen          443   ssl;
    default_type    "application/json";
    lua_code_cache  on;
    gzip            on;
    gzip_types      text/plain
                    application/css
                    application/javascript
                    application/lua
                    application/json;

    ssl_certificate     /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    location "=/" {
      access_by_lua_block {
        return require "ardoises.server".root ()
      }
    }

    location "=/dashboard" {
      access_by_lua_block {
        return require "ardoises.server".dashboard ()
      }
    }

    location "=/overview" {
      access_by_lua_block {
        return require "ardoises.server".overview ()
      }
    }

    location "=/login" {
      access_by_lua_block {
        return require "ardoises.server".login ()
      }
    }

    location "=/logout" {
      content_by_lua_block {
        return require "ardoises.server".logout ()
      }
    }

    location "=/register" {
      content_by_lua_block {
        return require "ardoises.server".register ()
      }
    }

    location "=/webhook" {
      content_by_lua_block {
        return require "ardoises.server".webhook ()
      }
    }

    location "~^/my/user$" {
      content_by_lua_block {
        return require "ardoises.server".my_user ()
      }
    }

    location "~^/my/ardoises$" {
      content_by_lua_block {
        return require "ardoises.server".my_ardoises ()
      }
    }

    location "~^/editors/(?<owner>[a-zA-Z0-9_-]+)/(?<name>[a-zA-Z0-9_-]+)/(?<branch>[a-zA-Z0-9_-]+)$" {
      content_by_lua_block {
        return require "ardoises.server".editor ()
      }
    }

    # location /executions/... {
    # }

    location "/lua/" {
      root          /;
      etag          on;
      default_type  "application/lua";
      set           $target   "";
      access_by_lua_block {
        local name     = ngx.var.uri:match "/lua/(.*)"
        local filename = package.searchpath (name, package.path)
        if filename then
          ngx.var.target = filename
        else
          return ngx.exit (404)
        end
      }
      try_files $target =404;
    }

    location "/static/" {
      autoindex           on;
      sendfile            on;
      sendfile_max_chunk  1m;
      etag                on;
      root                /;
      try_files           $uri =404;
    }

  }

}
