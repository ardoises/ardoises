<nav class="navbar navbar-default navbar-fixed-top">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-navbar-collapse-1">
        <i class="fa fa-inverse fa-bars"></i>
      </button>
      <a href="/">
        <button type="button" class="btn btn-default" aria-label="Home">
          <i class="fa fa-inverse fa-home" aria-hidden="true"></i>
        </button>
      </a>
    </div>
    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-navbar-collapse-1">
      <ul class="nav navbar-nav navbar-right">
        <li>
          <a href="/login">
            <button type="button" class="btn btn-default" aria-label="Login">
              <i class="fa fa-inverse fa-sign-in" aria-hidden="true"></i>
            </button>
          </a>
        </li>
        <li>
          <a href="https://github.com/ardoises/ardoises/issues">
            <button type="button" class="btn btn-default" aria-label="Help">
              <i class="fa fa-inverse fa-question" aria-hidden="true"></i>
            </button>
          </a>
        </li>
        <li>
          <a href="/overwiew#about">
            <button type="button" class="btn btn-default" aria-label="About">
              <i class="fa fa-inverse fa-envelope" aria-hidden="true"></i>
            </button>
          </a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<section class="bg-dark whole"
         id="editor">
  <svg width="100%" height="100%">
  </svg>
</section>

<script type="text/lua"
        lang="Lua">
  -- Taken from lua.vm.js:
  local function load_lua_over_http (url)
    local xhr = _G.js.new (_G.window.XMLHttpRequest)
    xhr:open ("GET", url, false)
    local ok, err = pcall (xhr.send, xhr)
    if not ok then
      return nil, tostring (err)
    elseif xhr.status ~= 200 then
      return nil, "HTTP GET " .. xhr.statusText .. ": " .. url
    end
    return load (xhr.responseText, url)
  end
  package.searchers [#package.searchers] = nil
  package.searchers [#package.searchers] = nil
  table.insert (package.searchers, function (mod_name)
    if not mod_name:match "/" then
      local full_url = "/lua/" .. mod_name
      local func, err = load_lua_over_http (full_url)
      if func ~= nil then return func end
      return "\n    " .. err
    end
  end)
  local Adapter = require "ardoises.js"
  xpcall (function ()
    local co = coroutine.create (function ()
      print "> running"
      require "rapidjson"
      print "< running"
    end)
    assert (coroutine.resume (co))
  end, function (err)
    print ("error:", err)
    print (debug.traceback ())
  end)
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"
        type="text/javascript">
</script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
        type="text/javascript">
</script>
<script src="https://d3js.org/d3.v4.min.js"
        type="text/javascript">
</script>
<script src="https://raw.githubusercontent.com/daurnimator/lua.vm.js/master/dist/lua.vm.js"
        type="text/javascript">
</script>

<script>
var svg = d3.select("svg"),
    width = +svg.attr("width");
var format = d3.format(",d");
var color = d3.scaleOrdinal(d3.schemeCategory20c);
var pack = d3.pack()
    .size([width, width])
    .padding(1.5);
</script>
